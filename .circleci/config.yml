# CircleCI 2.1 を使用します
version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2 
# ステップの集合
jobs:
  # Workflows を使用しない実行では、エントリポイントとして `build` ジョブが必要
  build:
    # このジョブのインスタンスを 3つ並列実行します
    parallelism: 3 
    # 
    working_directory: ~/haito-notice
    # Docker でステップを実行します
    docker:
      # プライマリコンテナ（すべての `steps` が次のイメージで実行）
      - image: circleci/ruby:2.6.3-stretch-node
        # プライマリコンテナの環境変数
        environment: 
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          # config/database.ymlの内容と一致させる
          PGUSER: haito_notice
          RAILS_ENV: test
      # データベースイメージ
      # $ psql -vで確認したバージョンと合わせる。-alpineが軽量版のため望ましい
      - image: circleci/postgres:1-alpine 
        # データベースの環境変数
        environment: 
          POSTGRES_USER: haito_notice
          POSTGRES_DB: hn_test
          POSTGRES_PASSWORD: ""
    executor: ruby/default

    steps:
      # ソースコードを作業ディレクトリにチェックアウトする特別なステップ
      - checkout 

      # Bundler のバージョンを指定します
      - run:
          name: Bundler を指定
          command: bundle -v

      # バンドルキャッシュを復元します
      # 依存関係キャッシュについては https://circleci.com/docs/ja/2.0/caching/ をお読みください
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-
      # Ruby の依存関係をインストールします
      - run: 
          name: バンドルインストール
          command: bundle check || bundle install
      # Ruby の依存関係のバンドルキャッシュを保存します
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: DB を待機
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: データベースをセットアップ
          command: bin/rails db:schema:load --trace

      # RSpecを未導入のためコメントアウト
      # - run:
      #     name: RSpec を並列実行
      #     command: |
      #       bundle exec rspec --profile 10 \
      #                         --format RspecJunitFormatter \
      #                         --out test_results/rspec.xml \
      #                         --format progress \
      #                         $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # タイミング解析のテスト結果を保存します
      # テストサマリー (https://circleci.com/docs/ja/2.0/collect-test-data/) に表示するテスト結果をアップロードします
      - store_test_results: 
          path: test_results
      # デプロイコンフィグの例については https://circleci.com/docs/ja/2.0/deployment-integrations/ を参照してください